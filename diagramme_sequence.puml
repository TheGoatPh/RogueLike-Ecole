@startuml
title RogueLike Game Sequence

actor Player
participant MainApplication
participant GameManager
participant GameScene
participant Entity
participant Dragon
participant SaveManager
participant PlayerCreation
participant SaveData
participant Potion

Player -> MainApplication: lance le jeu
activate MainApplication

alt Nouvelle Partie
    Player -> MainApplication: nouvelle partie
    MainApplication -> SaveManager: deleteSave()
    MainApplication -> GameManager: crée
    activate GameManager
    
    GameManager -> PlayerCreation: createPlayer(playerClass)
    activate PlayerCreation
    PlayerCreation --> GameManager: nouveau Player
    deactivate PlayerCreation
    
    GameManager -> GameScene: crée(player)
else Continuer Partie
    Player -> MainApplication: continuer
    MainApplication -> SaveManager: loadGame()
    activate SaveManager
    SaveManager --> MainApplication: SaveData
    deactivate SaveManager
    
    MainApplication -> PlayerCreation: createPlayer(saveData.playerClass)
    PlayerCreation --> MainApplication: Player
    MainApplication -> GameScene: crée(player, saveData)
end

activate GameScene
GameScene -> GameScene: initialisation()
GameScene -> GameScene: startGameLoop()

loop Game Loop tant que !isGameOver et !isPaused
    GameScene -> GameScene: update()
    GameScene -> GameScene: handleMovement()
    GameScene -> Entity: moveLeft()/moveRight()
    GameScene -> GameScene: applyGravity()
    GameScene -> GameScene: checkCollision()
    GameScene -> GameScene: updateDemons()
    GameScene -> GameScene: checkPotionCollision()
    GameScene -> GameScene: checkGameOver()
end

Player -> GameScene: appuie sur touches
alt Attaque (A)
    GameScene -> GameScene: handleAttack()
    GameScene -> Entity: canAttack()
    GameScene -> Entity: attack()
    GameScene -> Entity: resetAttackCooldown()
    GameScene -> Dragon: takeDamage()
end

alt Saut (UP)
    GameScene -> GameScene: jump()
end

alt Capacité Spéciale (Z)
    GameScene -> Entity: useSpecialAbility()
    GameScene -> Entity: canUseSpecialAbility()
    alt Warrior
        Entity -> Entity: heal(shieldAmount)
    else Wizard
        Entity -> Dragon: takeDamage(dragon.getCurrentHealth() / 2)
    else Assassin
        Entity -> Entity: isSpecialActive = true
    else Doctor
        Entity -> Entity: heal(missingHealth / 3)
    end
end

alt Utilisation Potion (E/R)
    GameScene -> GameScene: usePotion(slot)
    GameScene -> Entity: heal(30)
end

alt Game Over
    GameScene -> GameScene: checkGameOver()
    activate GameScene
    GameScene -> GameScene: stopWaveSpawning()
    GameScene -> GameScene: clearDemons()
    deactivate GameScene
end

alt Pause (ESCAPE)
    Player -> GameScene: pause
    GameScene -> GameScene: togglePauseMenu()
    GameScene -> SaveManager: saveGame()
    activate SaveManager
    SaveManager -> SaveData: crée
    SaveManager -> SaveManager: écrit game_save.json
    deactivate SaveManager
end

alt Spawn de Démons
    GameScene -> GameScene: startNextWave()
    activate GameScene
    GameScene -> GameScene: calculateDemonsForWave()
    loop tant que remainingDemonsToSpawn > 0 et !isGameOver
        GameScene -> GameScene: spawnDemon()
        GameScene -> Dragon: crée
        activate Dragon
        Dragon --> GameScene: nouveau Dragon
        deactivate Dragon
    end
    deactivate GameScene
end

alt Spawn de Potions
    GameScene -> GameScene: spawnPotion()
    GameScene -> Potion: crée
    activate Potion
    Potion --> GameScene: nouvelle Potion
    deactivate Potion
end

alt Fermeture du jeu
    Player -> MainApplication: quitte
    MainApplication -> GameScene: saveGame()
    GameScene -> Entity: getClassName()
    GameScene -> SaveManager: saveGame(saveData)
    activate SaveManager
    SaveManager -> SaveManager: écrit game_save.json
    deactivate SaveManager
end

@enduml