@startuml
title RogueLike - Diagramme de Classes

abstract class Entity {
  + x: double
  + y: double
  + sprite: ImageView
  # leftSprite: Image
  # rightSprite: Image
  # speed: double
  # maxHealth: int
  # currentHealth: int
  # attackDamage: int
  + Entity(maxHealth: int, attackDamage: int, speed: double)
  + moveLeft(): void
  + moveRight(): void
  + takeDamage(damage: int): void
  + heal(amount: int): void
  + getCurrentHealth(): int
  + getMaxHealth(): int
}

abstract class Player extends Entity {
  # DEFAULT_SPECIAL_ABILITY_COOLDOWN: long
  # lastSpecialAbilityTime: long
  # specialAbilityEndTime: long
  # isSpecialActive: boolean
  # attackCooldown: long
  # lastAttackTime: long
  + Player(maxHealth: int, attackDamage: int, speed: double)
  + {abstract} attack(): void
  + {abstract} useSpecialAbility(): void
  + canAttack(): boolean
  + resetAttackCooldown(): void
  + isSpecialActive(): boolean
  + getSpecialCooldownPercentage(): double
  # canUseSpecialAbility(): boolean
}

class Warrior extends Player {
  - isDefending: boolean
  + Warrior()
  + attack(): void
  + useSpecialAbility(): void
}

class Wizard extends Player {
  - mana: int
  - isLightningActive: boolean
  + Wizard()
  + attack(): void
  + useSpecialAbility(): void
  + isLightningActive(): boolean
}

class Assassin extends Player {
  + Assassin()
  + attack(): void
  + useSpecialAbility(): void
}

class Doctor extends Player {
  - healingPower: int
  + Doctor()
  + attack(): void
  + useSpecialAbility(): void
}

class Dragon extends Entity {
  - speed: double
  - velocityY: double
  - isAttacking: boolean
  - lastAttackTime: long
  - healthBar: Rectangle
  + Dragon(x: double, y: double)
  + moveTowardsPlayer(player: Player): void
  + takeDamage(damage: int): void
  + isDead(): boolean
  + checkCollision(platform: Rectangle): void
  + getSprite(): ImageView
  + getHealthBar(): Rectangle
  + getCurrentHealth(): int
}

class GameScene {
  - {static} GAME_WIDTH: int
  - {static} GAME_HEIGHT: int
  - player: Player
  - activeKeys: Set<KeyCode>
  - dragons: List<Dragon>
  - platforms: List<Rectangle>
  - isGameOver: boolean
  - isPaused: boolean
  - currentWave: int
  + GameScene(player: Player, saveData: SaveData)
  - setupUI(): void
  - setupControls(): void
  - startGameLoop(): void
  - update(): void
  - handleAttack(): void
  - checkGameOver(): void
  - spawnDemon(): void
  - startNextWave(): void
  - saveGame(): void
}

class MainMenu {
  - menu: VBox
  + getMainMenu(): VBox
  - startNewGame(): void
  - loadGame(): void
}

class GameManager {
  - currentPlayer: Player
  - gameScene: GameScene
  - menu: VBox
  + getClassSelectionMenu(): VBox
  - createCharacterButton(): VBox
  - startGame(): void
}

class SaveManager {
  - {static} SAVE_FILE: String
  - {static} gson: Gson
  + {static} saveGame(saveData: SaveData): void
  + {static} loadGame(): SaveData
  + {static} hasSaveFile(): boolean
  + {static} deleteSave(): void
}

class SaveData {
  - playerClass: String
  - currentWave: int
  - currentHealth: int
  - demonKillCount: int
  - playTime: long
  - hasPotion1: boolean
  - hasPotion2: boolean
  + SaveData()
  + SaveData(playerClass: String, currentWave: int, ...)
  + getters/setters
}

class MainApplication {
  - {static} WINDOW_WIDTH: int
  - {static} WINDOW_HEIGHT: int
  + start(stage: Stage): void
  + {static} main(args: String[]): void
}

class PlayerCreation {
  + {static} createPlayer(playerClass: String): Player
}

class Potion {
  - sprite: Node
  - x: double
  - y: double
  - HEAL_AMOUNT: int
  + Potion(x: double, y: double)
  + getSprite(): Node
  + getX(): double
  + getY(): double
  + getHealAmount(): int
}

MainApplication --> MainMenu
MainMenu --> GameManager
GameManager --> GameScene
GameScene --> Player
GameScene --> Dragon
GameScene --> Potion
GameScene ..> SaveManager
SaveManager --> SaveData
PlayerCreation ..> Player

note right of Entity : "Classe abstraite de base\npour toutes les entit√©s du jeu"
note right of Player : "Classe abstraite pour tous\nles types de joueurs"
note right of Dragon : "Ennemis du jeu avec\nIA basique"
note right of SaveManager : "Gestion des sauvegardes\nen format JSON"

@enduml