@startuml
title RogueLike - Diagramme de Classes

abstract class Entity {
  + x: double
  + y: double
  # speed: double
  # maxHealth: int
  # currentHealth: int
  # attackDamage: int
  + Entity(maxHealth: int, attackDamage: int, speed: double)
  + moveLeft(): void
  + moveRight(): void
  + takeDamage(damage: int): void
  + heal(amount: int): void
  + getCurrentHealth(): int
  + getMaxHealth(): int
}

abstract class Player extends Entity {
  # {static} DEFAULT_SPECIAL_ABILITY_COOLDOWN: long = 15000
  # lastSpecialAbilityTime: long
  # specialAbilityEndTime: long
  # isSpecialActive: boolean
  # attackCooldown: long
  # lastAttackTime: long
  + Player(maxHealth: int, attackDamage: int, speed: double)
  + {abstract} attack(): void
  + {abstract} useSpecialAbility(): void
  + {abstract} getClassName(): String
  # canUseSpecialAbility(): boolean
  + canAttack(): boolean
  + resetAttackCooldown(): void
  + {final} getSpecialCooldownPercentage(): double
}

class Warrior extends Player {
  + Warrior()
  + attack(): void
  + useSpecialAbility(): void
  + getClassName(): String
}

class Wizard extends Player {
  - isLightningActive: boolean
  - {static} SPECIAL_ABILITY_COOLDOWN: long = 15000
  + Wizard()
  + attack(): void
  + useSpecialAbility(): void
  + isLightningActive(): boolean
  + getClassName(): String
}

class Assassin extends Player {
  + Assassin()
  + attack(): void
  + useSpecialAbility(): void
  + getClassName(): String
}

class Doctor extends Player {
  + Doctor()
  + attack(): void
  + useSpecialAbility(): void
  + getClassName(): String
}

class Dragon {
  - x: double
  - y: double
  - speed: double = 0.8
  - velocityY: double
  - gravity: double = 0.4
  - isAttacking: boolean
  - lastAttackTime: long
  - {static} ATTACK_COOLDOWN: long = 2000
  - {static} ATTACK_RANGE: double = 60
  - {static} ATTACK_DAMAGE: int = 5
  - maxHealth: int = 50
  - currentHealth: int = 50
  - lastDamageTime: long
  - {static} DAMAGE_COOLDOWN: long = 1000
  + Dragon(x: double, y: double)
  + moveTowardsPlayer(player: Player): void
  - attack(player: Player): void
  + checkCollision(): void
  + takeDamage(damage: int): void
  + isDead(): boolean
  + getCurrentHealth(): int
}

class GameScene {
  - {static} GAME_WIDTH: int
  - {static} GAME_HEIGHT: int
  - player: Player
  - isJumping: boolean
  - verticalVelocity: double
  - {static} GRAVITY: double = 0.3
  - {static} JUMP_FORCE: double = -15.0
  - dragons: List<Dragon>
  - isGameOver: boolean
  - {static} FALL_DEATH_Y: double
  - demonKillCount: int
  - startTime: long
  - lastDamageTime: long
  - {static} DAMAGE_COOLDOWN: long = 1000
  - hasPotion1: boolean
  - hasPotion2: boolean
  - currentWave: int
  - {static} MAX_WAVES: int = 30
  - isWaveInProgress: boolean
  - remainingDemonsToSpawn: int
  - isPaused: boolean
  + GameScene(player: Player)
  + GameScene(player: Player, saveData: SaveData)
  - update(): void
  - handleMovement(): void
  - jump(): void
  - applyGravity(): void
  - checkCollision(): void
  - handleDemonCollision(dragon: Dragon): void
  - updateDemons(): void
  - checkGameOver(): void
  - restartGame(): void
  - returnToMenu(): void
  - spawnDemon(): void
  - updateTimer(): void
  - spawnPotion(): void
  - usePotion(slot: int): void
  - checkPotionCollision(): void
  - handleAttack(): void
  - startNextWave(): void
  - calculateDemonsForWave(wave: int): int
  - startWaveSpawning(): void
  - togglePauseMenu(): void
  - saveGame(): void
  - getPlayerClassName(): String
}

class GameManager {
  - currentPlayer: Player
  - gameScene: GameScene
  + getClassSelectionMenu(): void
  - startGame(playerClass: String): void
}

class SaveManager {
  - {static} SAVE_FILE: String = "game_save.json"
  - {static} gson: Gson
  + {static} saveGame(saveData: SaveData): void
  + {static} loadGame(): SaveData
  + {static} hasSaveFile(): boolean
  + {static} deleteSave(): void
}

class SaveData {
  - playerClass: String
  - currentWave: int
  - currentHealth: int
  - demonKillCount: int
  - playTime: long
  - hasPotion1: boolean
  - hasPotion2: boolean
  + SaveData()
  + SaveData(playerClass: String, currentWave: int, currentHealth: int, demonKillCount: int, playTime: long, hasPotion1: boolean, hasPotion2: boolean)
  + getters/setters
}

class MainApplication {
  + {static} WINDOW_WIDTH: int = 1024
  + {static} WINDOW_HEIGHT: int = 576
  - gameManager: GameManager
  + start(): void
  + {static} main(args: String[]): void
}

class PlayerCreation {
  + {static} createPlayer(playerClass: String): Player
}

class Potion {
  - x: double
  - y: double
  - {static} HEAL_AMOUNT: int = 30
  + Potion(x: double, y: double)
  + getX(): double
  + getY(): double
  + getHealAmount(): int
}

MainApplication --> GameManager
GameManager --> GameScene
GameScene --> Player
GameScene --> Dragon
GameScene --> Potion
GameScene ..> SaveManager
SaveManager --> SaveData
PlayerCreation ..> Player

note right of Entity : "Classe abstraite de base\npour toutes les entit√©s du jeu"
note right of Player : "Classe abstraite pour tous\nles types de joueurs"
note right of Dragon : "Ennemis du jeu avec\nIA basique"
note right of SaveManager : "Gestion des sauvegardes\nen format JSON"

@enduml